{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","sortBy","undefined","sortAsc","data","series","isLoading","isError","errorMessage","handleClickColumn","bind","this","setState","fetch","res","json","Object","keys","rates","map","country","i","arr","rate","console","log","warn","e","target","getAttribute","sort","a","b","data-sort-by","onClick","item","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sWAKqBA,G,kBACnB,WAAaC,GAAQ,IAAD,8BAClB,4CAAMA,KACDC,MAAQ,CACXC,YAAQC,EACRC,SAAS,EACTC,UAAMF,EACNG,OAAQ,GACRC,WAAW,EACXC,SAAS,EACTC,aAAc,wDAGhB,EAAKC,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBAZP,E,4MAgBlBC,KAAKC,SAAS,CAACN,WAAW,I,kBAGNO,MAtBP,kB,cAsBLC,E,gBACWA,EAAIC,O,OAAjBX,E,OACAC,EAASW,OAAOC,KAAKb,EAAKc,OAAOC,KAAI,SAACC,EAASC,EAAGC,GACpD,MAAO,CACLF,UACAG,KAAMnB,EAAKc,MAAME,OAIrBI,QAAQC,IAAI,OAAQrB,GACpBoB,QAAQC,IAAI,SAAUpB,GACtBM,KAAKC,SAAS,CACZR,OACAC,SACAC,WAAW,I,kDAGbkB,QAAQE,KAAR,MACAf,KAAKC,SAAS,CAACL,SAAS,I,wJAKToB,GAAI,IAEf1B,EADW0B,EAAVC,OACeC,aAAa,gBAE5B1B,EAAWQ,KAAKX,MAAhBG,QACFE,EAAUM,KAAKX,MAAfK,OAELA,EAASA,EAAOyB,MAAK,SAACC,EAAGC,GACvB,OAAI7B,EACE4B,EAAE9B,GAAU+B,EAAE/B,GAAkB,EAChC8B,EAAE9B,GAAU+B,EAAE/B,IAAmB,EAC9B,EAEH8B,EAAE9B,GAAU+B,EAAE/B,IAAmB,EACjC8B,EAAE9B,GAAU+B,EAAE/B,GAAkB,EAC7B,KAOXU,KAAKC,SAAS,CACZX,SACAE,QAASF,IAAWU,KAAKX,MAAMC,QAAUE,EAAUA,M,+BAI5C,IAAD,EAC6BQ,KAAKX,MAAnCK,EADC,EACDA,OADC,EACOF,QACf,OAFQ,EACgBG,UAEd,2CAGR,6BACE,+BACE,+BACE,4BACE,wBAAI2B,eAAa,UAAUC,QAASvB,KAAKF,mBAAzC,WACA,wBAAIwB,eAAa,OAAOC,QAASvB,KAAKF,mBAAtC,UAGJ,+BACCJ,EAAOc,KAAI,SAACgB,EAAMd,GACjB,OACE,wBAAIe,IAAKD,EAAKf,SACZ,wBAAIgB,IAAG,UAAKD,EAAKf,QAAV,MAAuBe,EAAKf,SACnC,wBAAIgB,IAAG,UAAKD,EAAKf,QAAV,MAAuBe,EAAKZ,iB,GA1FlBc,cCObC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.91aec136.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nconst DATA_URL = 'api/rates.json'\n\nexport default class App extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      sortBy: undefined,\n      sortAsc: true,\n      data: undefined,\n      series: [],\n      isLoading: false,\n      isError: false,\n      errorMessage: 'Error loading data please contact site administrator'\n    }\n    // bind methods\n    this.handleClickColumn = this.handleClickColumn.bind(this)\n  }\n\n  async componentDidMount () {\n    this.setState({isLoading: true})\n\n    try {\n      const res = await fetch(DATA_URL)\n      let data = await res.json()\n      let series = Object.keys(data.rates).map((country, i, arr) => {\n        return {\n          country,\n          rate: data.rates[country]\n        }\n      })\n\n      console.log('data', data)\n      console.log('series', series)\n      this.setState({\n        data,\n        series,\n        isLoading: false\n      })\n    } catch (e) {\n      console.warn(e)\n      this.setState({isError: true})\n    }\n\n  }\n\n  handleClickColumn (e) {\n    const {target} = e\n    const sortBy = target.getAttribute('data-sort-by')\n    // const sortAsc = Boolean(target.getAttribute('data-sort-asc'))\n    const {sortAsc} = this.state\n    let {series} = this.state\n\n    series = series.sort((a, b) => {\n      if (sortAsc) {\n        if (a[sortBy] < b[sortBy] ) {return 1}\n        if (a[sortBy] > b[sortBy] ) {return -1}\n        return 0\n      } else {\n        if (a[sortBy] < b[sortBy] ) {return -1}\n        if (a[sortBy] > b[sortBy] ) {return 1}\n        return 0\n      }\n\n\n\n    })\n\n    this.setState({\n      sortBy,\n      sortAsc: sortBy === this.state.sortBy ? !sortAsc : sortAsc\n    })\n\n  }\n  render () {\n    const {series, sortAsc, isLoading} = this.state\n    if (isLoading) {\n      return (<div>Loading...</div>)\n    }\n    return (\n      <div>\n        <table>\n          <thead>\n            <tr>\n              <th data-sort-by=\"country\" onClick={this.handleClickColumn}>Country</th>\n              <th data-sort-by=\"rate\" onClick={this.handleClickColumn}>Rate</th>\n            </tr>\n          </thead>\n          <tbody>\n          {series.map((item, i) => {\n            return (\n              <tr key={item.country}>\n                <td key={`${item.country}0`}>{item.country}</td>\n                <td key={`${item.country}1`}>{item.rate}</td>\n              </tr>)\n          })}\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n} ;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}